parameters:
    tenant.request_attribute: tenant
    tenant.routes:
        - { path: ^/api, anonymous: false }
        - { path: ^/another_path, anonymous: false }
        - { path: ^/api/callback, anonymous: true }
    tenant.commands:
        - doctrine:database:create
        - doctrine:database:drop
        - doctrine:database:import
        - doctrine:migrations:sync-metadata-storage
        - doctrine:schema:create
        - doctrine:schema:drop
        - doctrine:schema:update
        - doctrine:schema:validate
        - doctrine:migrations:diff
        - doctrine:migrations:execute
        - doctrine:migrations:generate
        - doctrine:migrations:latest
        - doctrine:migrations:migrate
        - doctrine:migrations:status
        - doctrine:migrations:version
        - doctrine:mongodb:schema:update
        - doctrine:mongodb:schema:create
        - doctrine:mongodb:schema:drop
        - doctrine:mongodb:schema:shard
        - doctrine:mongodb:tail-cursor
        - doctrine:mongodb:query
        - doctrine:mongodb:fixtures:load

services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false

    App\TenantBundle\:
        resource: '../*'
        exclude: '../{Entity,Repository,Tests,Exception,Interfaces}'

    App\TenantBundle\Command\:
        resource: '../../Command/*'
        tags: ['console.command']

    App\TenantBundle\Repository\TenantInstallRepository: ~


    # INSTALLATION

    App\TenantBundle\Processor\TenantBuildProcessor: ~

    # DOCTRINE WRAPPER

    App\TenantBundle\Doctrine\ConnectionWrapper: ~

    # FACTORY
    App\TenantBundle\Factory\ResourceAbstractFactory: 'App\TenantBundle\Factory\ORM\ORMFactory'
    App\TenantBundle\Factory\ORM\ORMFactory:
        arguments:
            - 'App\TenantBundle\Factory\ORM\TenantFactory'
            - 'App\TenantBundle\Factory\ORM\TenantUserFactory'
    App\TenantBundle\Factory\ORM\TenantFactory:
        arguments:
            $host: '%env(DATABASE_HOST)%'
            $user: '%env(DATABASE_USER)%'
            $password: '%env(DATABASE_PASSWORD)%'
            $port: '%env(DATABASE_PORT)%'

    App\TenantBundle\Factory\ORM\TenantUserFactory: ~


    # Resolver

    App\TenantBundle\Component\TenantStateInterface: 'App\TenantBundle\Component\TenantState'
    App\TenantBundle\Component\TenantState: ~

    App\TenantBundle\Component\TenantResolver:
        public: true
        calls:
            - [ setLogger, [ '@?logger' ]]


    # Logger Processors

    App\TenantBundle\Logger\TenantLoggerProcessor:
        tags:
            - { name: monolog.processor, method: processRecord }


    # Handlers

    App\TenantBundle\SwitchHandlers\MysqlConnectionHandler:
        arguments:
            $host: '%env(DATABASE_HOST)%'
            $user: '%env(DATABASE_USER)%'
            $password: '%env(DATABASE_PASSWORD)%'
            $port: '%env(DATABASE_PORT)%'
        tags:
            - { name: tenant.switch_handler }

    App\TenantBundle\SwitchHandlers\MongoConnectionHandler:
        tags:
            - { name: tenant.switch_handler }

    App\TenantBundle\SwitchHandlers\DirectoryHandler:
        tags:
            - { name: tenant.switch_handler }

    App\TenantBundle\SwitchHandlers\LoggerHandler:
        tags:
            - { name: tenant.switch_handler }

    App\TenantBundle\SwitchHandlers\CacheHandler:
        tags:
            - { name: tenant.switch_handler }
        arguments:
            - '@snc_redis.cache'


    # LOCATORS

    App\TenantBundle\Locators\LocatorChain:
        public: false
        arguments:
            - '%tenant.request_attribute%'

    App\TenantBundle\Locators\GetParameterLocator:
        public: false
        tags:
            - { name: tenant.locators }

    App\TenantBundle\Locators\UserCookieLocator:
        public: false
        arguments:
            $cookieParameterName: 'PLATFORM_AREA'
        tags:
            - { name: tenant.locators }

    App\TenantBundle\Locators\LoginRequestLocator:
        public: false
        tags:
            - { name: tenant.locators }

    App\TenantBundle\Locators\ForgotPasswordRequestLocator:
        public: false
        tags:
            - { name: tenant.locators }

    App\TenantBundle\Locators\ConfirmationTokenLocator:
        public: false
        tags:
            - { name: tenant.locators }

    App\TenantBundle\Locators\HeaderLocator:
        public: false
        tags:
            - { name: tenant.locators }

    # KERNEL SUBSCRIBERS

    App\TenantBundle\EventListener\FilesSubscriber:
        public: false
        tags:
            - { name: kernel.event_subscriber }

    App\TenantBundle\EventListener\TenantSubscriber:
        public: false
        arguments:
            $routes: '%tenant.routes%'
        tags:
            - { name: kernel.event_subscriber }

    App\TenantBundle\EventListener\CommandSubscriber:
        public: false
        arguments:
            $commands: '%tenant.commands%'
        calls:
            - [ setLogger, ['@?logger'] ]
        tags:
            - { name: kernel.event_subscriber }

    App\TenantBundle\EventListener\UserSubscriber:
        public: false
        tags:
            - { name: doctrine.event_subscriber }



    # MANAGERS
    App\TenantBundle\Manager\TenantInstallManager: ~
